"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = getConfig;
const abap_1 = require("../abap");
const project_utils_1 = require("./project-utils");
const descriptor_content_1 = require("./descriptor-content");
const ui5_1 = require("../ui5");
/**
 * Generates the configuration object for the Adaptation Project.
 *
 * @param {ConfigOptions} options - The configuration options.
 * @param {AbapServiceProvider} options.provider - The ABAP service provider instance.
 * @param {ConfigAnswers} options.configAnswers - User-provided configuration details (system, application, etc.).
 * @param {FlexLayer} options.layer - The FlexLayer indicating the deployment layer.
 * @param {object} options.defaults - Default project parameters.
 * @param {string} options.defaults.namespace - The default namespace to be used.
 * @param {Package} options.packageJson - The package.json information for generating custom configuration.
 * @param {ToolsLogger} options.logger - The logger for debugging and error logging.
 * @returns {Promise<AdpWriterConfig>} A promise that resolves to the generated ADP writer configuration.
 */
async function getConfig(options) {
    const { configAnswers, attributeAnswers, layer, logger, packageJson, provider, publicVersions } = options;
    const ato = await provider.getAtoInfo();
    const operationsType = ato.operationsType ?? 'P';
    const target = await (0, abap_1.getProviderConfig)(configAnswers.system, logger);
    const customConfig = (0, project_utils_1.getCustomConfig)(operationsType, packageJson);
    const isCloudProject = await provider.isAbapCloud();
    const isCustomerBase = layer === "CUSTOMER_BASE" /* FlexLayer.CUSTOMER_BASE */;
    const ui5Version = isCloudProject
        ? (0, ui5_1.getLatestVersion)(publicVersions)
        : (0, ui5_1.getVersionToBeUsed)(attributeAnswers.ui5Version, isCustomerBase, publicVersions);
    const { namespace, title, enableTypeScript } = attributeAnswers;
    const { application: { id, bspName } } = configAnswers;
    return {
        app: {
            id: namespace,
            reference: id,
            layer,
            title,
            bspName,
            content: [(0, descriptor_content_1.getNewModelEnhanceWithChange)()]
        },
        ui5: {
            minVersion: ui5Version?.split(' ')[0],
            version: (0, ui5_1.getFormattedVersion)(ui5Version),
            frameworkUrl: (0, ui5_1.getOfficialBaseUI5VersionUrl)(ui5Version)
        },
        customConfig,
        target,
        options: {
            fioriTools: true,
            enableTypeScript
        }
    };
}
//# sourceMappingURL=writer-config.js.map