import type { ToolsLogger } from '@sap-ux/logger';
import type { Manifest } from '@sap-ux/project-access';
import type { AbapServiceProvider } from '@sap-ux/axios-extension';
/**
 * Evaluates whether the application described by the manifest is a SAP Fiori Elements version 4 application.
 *
 * @param {Manifest} manifest - The application manifest to evaluate.
 * @returns {boolean} True if the application uses SAP Fiori Elements version 4 libraries.
 */
export declare function isV4Application(manifest?: Manifest): boolean;
/**
 * Checks if views are loaded synchronously or asynchronously in the UI5 settings of the manifest.
 * Sets the isAppSync property based on the loading method.
 *
 * @param {Manifest['sap.ui5']} ui5Settings - The UI5 settings part of the manifest.
 * @returns {boolean} Boolean if views are loaded synchronously or asynchronously.
 */
export declare function isSyncLoadedView(ui5Settings?: Manifest['sap.ui5']): boolean;
/**
 * Service class for handling operations related to application manifests.
 * Manifest and URL are lazily loaded and stored internally.
 */
export declare class SourceManifest {
    private readonly provider;
    private readonly appId;
    private readonly logger?;
    /**
     * The parsed manifest object, loaded once and cached internally.
     */
    private manifest?;
    /**
     * The manifest URL for the specified application, loaded once and cached internally.
     */
    private manifestUrl?;
    /**
     * Creates an instance of SourceManifest.
     *
     * @param {AbapServiceProvider} provider - The ABAP service provider for communicating with the system.
     * @param {string} appId - The ID of the application whose manifest should be managed.
     * @param {ToolsLogger} logger - Optional logger for debugging purposes.
     */
    constructor(provider: AbapServiceProvider, appId: string, logger?: ToolsLogger | undefined);
    /**
     * Returns the manifest URL, loading it if not already available.
     *
     * @returns {Promise<string>} A promise resolving to the manifest URL string.
     */
    getManifestUrl(): Promise<string>;
    /**
     * Returns the parsed manifest, loading it if not already available.
     *
     * @returns A promise resolving to the parsed manifest object.
     */
    getManifest(): Promise<Manifest>;
    /**
     * Loads the manifest URL from the system using the application ID.
     * The result is stored internally for future access.
     *
     * @returns {Promise<string>} A promise that resolves once the URL has been fetched and set.
     */
    private loadManifestUrl;
    /**
     * Loads the manifest from the system and stores it internally.
     * Requires a manifest URL to be available (loads it if necessary).
     *
     * @returns {Promise<Manifest>} A promise that resolves once the manifest has been fetched and parsed.
     */
    private loadManifest;
}
//# sourceMappingURL=manifest.d.ts.map